---
title: "Humans Learning"
subtitle: "Lesson 2: Making a line plot with ggplot"
date: "November 11, 2024"
author: "Brian Calhoon"
title-block-banner: "#C9C9C9"
format: 
  html:
    code-fold: false
    code-summary: "Show the code"
    toc: true
    css: prep/styles.css
editor: visual
filters: 
  - webr
---


```{r global_options, include=F, warning=F, message=F, error=F}
source(here::here("prep/prep.R"))
```

# Why am I here?        `r fontawesome::fa("earlybirds", fill = "#FFB947", height = '2em', width = '2em')`

:::::::: columns
:::: {.column width="20%"}
::: box-header
![](prep/humanslearning.png)
:::
::::

::::: {.column width="80%"}
:::: box
::: box-header
Welcome to the second iteration of the Humans Learning lessons. If you came back after the first iteration, then you are interested in learning something about data visualization through code. As a reminder, each lesson is designed as a 5 - 10 minute virtual session conducted for EnCompass staff to expand their skills with data, and the means of learning is the R programming language. Each lesson will have learning objectives, some example code and explanation to demonstrate a technique or skill, and an open code chunk at the end for you to have some fun. Each lesson is then captured in an html file for online access. This is all in the service of humans learning. Enjoy!
:::
::::
:::::
::::::::

# Learning objectives

For this session, the learning objectives are to:

- Group data to calculate summary statistics

- Make your first line plot

## Install and load packages

In your R script, you will use the `install.packages()` and `library()` functions to install and load the two packages Tidyverse and Gapminder.

Tidyverse provides a suite of compatible data wrangling and visualization tools. The workhorse of data visualization is the `ggplot2` package. With `ggplot2` the sky is the limit! From basic bar plots to animated graphics to interactive charts and tables connected by a common data source, `ggplot2` and its extension packages can do it all. And once again, Gapminder provides a dataset extracted from the global trend data maintained by, https://www.gapminder.org/.

```{r}
#| class-output: pre

#Installs the package on your system.
install.packages(c("tidyverse", "gapminder"))

#load the libraries so you can use them
library(tidyverse)
library(gapminder)

```

## View the data

Just as in the first session, the first step is to view the data. To look at just the first six rows so you can see the variable names and structure of the data pass `gapminder` to `head()` as in the code below.

```{r data}
#| class-output: pre

# assign gapminder to df 
# this is required, but it makes life easier
# don't we all want life to be easier

df <- gapminder

# look at the gapminder dataset
head(df)

tail(df)

```


## Make a line plot

As fun as looking at data is, we probably want to do more. Since our objective is to make a line plot, we should do that next. The structure of ggplot requires that we pass it an object (df), the type of `geom_*` we want to make (in this case a line plot), and the aesthetics or the variables we want to plot. 



```{r plot}
#make a plot
ggplot(data = df) +
  geom_line(aes(x = year, y = gdpPercap, color = continent))

```

Yeeeeesh!! That did not work at all. Looks like we forgot to `group_by()` and `summarize()` to create summary statistics that would provide us a single datapoint to follow across the years.

Let's us df to create a new object, `df1`. `df1` will group the data by continent and year and create a variable for the mean GDP per capita. This will provide a single data point for each continent, for each year so that we can make useful lines for the mean GDP per capita over time.

```{r}

#| class-output: pre


df1 <- df |> 
  group_by(continent, year) |> 
  summarize(avg_gdpPercap = mean(gdpPercap))


```

Now we just have to remember the how ggplot works and make our line plot. It takes three components.

- The data object, `df1`
- The geom, `geom_line()`
- The aesthetics, `year` (x-axis), `avg_gdpPercap` (y-axis), and `continent` (color). 

```{r plot more}

#| class-output: pre


ggplot(df1) +
  geom_line(aes(x = year, y = avg_gdpPercap, color = continent))


```

## Have fun!

Now it's your turn practice! Below is a fully functioning code editor with starting code in place. Feel free to experiment with different grouping variables in the `group_by()` call or to adjust the summary statistic in `summarize()`. Then, have fun with the plot!

```{webr-r}

library(tidyverse)
library(gapminder)

df <- gapminder

df1 <- df |> 
  group_by(continent, year) |> 
  summarize(avg_gdpPercap = mean(gdpPercap))

ggplot(df1) +
  geom_line(aes(x = year, y = avg_gdpPercap, color = continent))

```
