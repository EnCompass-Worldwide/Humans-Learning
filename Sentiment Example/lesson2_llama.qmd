---
title: "Sentiment Analysis: Llama Llama"
subtitle: "Comparing Llama with the Bing lexicon"
date: November 8, 2024
author: "Brian Calhoon"
title-block-banner: "#C9C9C9"
format:
  html:
    code-fold: true
    code-summary: "Show the code"
    toc: true
    css: ./styles.css
execute: 
  warning: false
  message: false
  error: false
editor: visual

---

```{r global_options, include=F, warning=F, message=F, error=F}
source(here::here("prep/prep.R"))

#library(tidytext)
library(ollamar)
library(mall)
library(remotes)
library(textdata)
library(tidytext)


```



# Why am I here?        `r fontawesome::fa("earlybirds", fill = "#FFB947", height = '2em', width = '2em')`

::::::: columns
:::: {.column width="20%"}
::: box-header
![](./humanslearning.png)
:::
::::

:::: {.column width="80%"}
::: box
::: box-header 

It might be because you are curious about sentiment analysis. This lesson will take an example dataframe that has a text field and compare the ability of Meta's LLama 3.2,  bing's lexicon, and Loughran-McDonald's lexicon at identifying positive and negative sentiments from short responses. This draws on the great work of Julia Silge and David Robinson [Text Mining with R](www.tidytextmining.com) for the lexicon-based sentiment analysis. For the Llama part of the analysis, the `ollama` and `mall` R packages do the heavy lifting with `mall` providing the tidy functions that are used to interact with the data. Thanks for learning with me today. Enjoy!
:::
::::
:::::::



# Learning objectives

The learning objectives in this lesson are to:

-   Run the Llama large-language model (LLM) locally

-   Conduct a simple sentiment analysis using Llama, bing, and Loughran-McDonald


## A dataset

Here's a dataset that we can use. You can explore it here. For our purposes we're mainly interested in the column `text_response`.

```{r}
df <- readxl::read_xlsx("C:/Users/Brian Calhoon/Documents/Shiny-sandbox/data/testdata2.xlsx")

DT::datatable(df, class = 'cell-border stripe', option = list(pageLength = 5), filter = "top")


```

## Sentiment analysis with bing and Loughran-McDonald


```{r message = F, warning = F}

bing <- tidytext::get_sentiments(lexicon = "bing")
loughran <- textdata::lexicon_loughran()


```

Sentiment lexicons are basically lists of words that have been coded with a sentiment value (positive, negative, or a number score). The bing lexicon has `r nrow(bing)` words and the Loughran-McDonald has `r nrow(loughran)` words. We can tokenize and identify the sentiment words and then quantify all positive words as 1 and negative words as -1 before computing an average sentiment score for each respondent.


```{r}

bing_sents <- df |>
  dplyr::select(text_response) |> 
  dplyr::mutate(respondent = row_number()) |> 
  tidytext::unnest_tokens(word, text_response) |> 
  dplyr::inner_join(bing) |> 
  dplyr::mutate(value = case_when(sentiment == "positive" ~ 1
                               , sentiment == "negative" ~ -1)) |> 
      dplyr::group_by(respondent) |> 
      dplyr::summarize(score = mean(value))


loughran_sents <- df |>
  dplyr::select(text_response) |> 
  dplyr::mutate(respondent = row_number()) |> 
  tidytext::unnest_tokens(word, text_response) |> 
  dplyr::inner_join(loughran) |> 
  dplyr::mutate(value = case_when(sentiment == "positive" ~ 1
                               , sentiment == "negative" ~ -1)) |> 
      dplyr::group_by(respondent) |> 
      dplyr::summarize(score = mean(value))

```
:::

Then, we do a similar process using Llama, but we don't have to take an average score because the LLM provides its own rating of positive, negative, or neutral for each respondent. 

```{r message = F, warning = F}


mall::llm_use("ollama", "llama3.2", seed = 100, .cache = "_readme_cache")

llama_sents <- df |>
  dplyr::select(text_response) |> 
  dplyr::mutate(respondent = row_number()) |> 
  mall::llm_sentiment(col = text_response, options = c("positive",  "negative", "neutral")) |> 
  dplyr::mutate(value = case_when(.sentiment == "positive" ~ 1
                               , .sentiment == "negative" ~ -1
                               , .sentiment == "neutral" ~ 0)) 

```

## Visualizing the output

A density plot 

```{r}


markdown_text <- ggtext::element_markdown("The <span style = 'color:#00457C;'> <b>bing<b></span> and <span style = 'color:#89C266;'> <b> Loughran-McDonald <b> </span> sentiment lexicons <br> miss the nuance of the language that the <span style = 'color:#FF7C48;'><b>Llama<b></span> <br> sentiment analysis captures.")

ggplot(bing_sents) +
  geom_density(aes(score), color = "#00457C", lwd = 1.5) +
  geom_density(data = loughran_sents, aes(score), color = "#89C266", lwd = 1.5) +
  geom_density(data = llama_sents, aes(value), color = "#FF7C48", lwd = 1.5) +
  theme_minimal()+
  labs(title = "Comparison of sentiments with different methods", 
    subtitle = markdown_text,
    y = "Propotion of responses",
    x = "More negative | More positive") +
  theme(plot.title = element_text(size = 20, face = "bold"), 
    plot.subtitle = element_markdown(size = 16),
    plot.title.position = "plot")


#fill = "#89C266"
#fill = "#FF7C48"
```