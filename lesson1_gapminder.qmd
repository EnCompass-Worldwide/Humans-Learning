---
title: "Humans Learning"
subtitle: "Lesson 1: Getting started in R with Gapminder"
date: "November 1, 2024"
author: "Brian Calhoon"
title-block-banner: "#C9C9C9"
format: 
  html:
    code-fold: false
    code-summary: "Show the code"
    toc: true
    css: prep/styles.css
editor: visual
filters: 
  - webr
---

```{r global_options, include=F, warning=F, message=F, error=F}
source(here::here("prep/prep.R"))
```

# Why am I here? &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   `r fontawesome::fa("earlybirds", fill = "#FFB947", height = "3em", width = "2em")`



:::::::: columns
::: {.column width="20%"}

::: box-header
![](prep/humanslearning.png)
:::

:::

:::::: {.column width="80%"}
::::: box
:::: box-header

Welcome to the first iteration of the Humans Learning lessons. Each lesson is designed as a 5 - 10 minute virtual session conducted for EnCompass staff to expand their skills with data, and the means of learning is the R programming language. Each lesson will have learning objectives, some example code and explanation to demonstrate a technique or skill, and an open code chunk at the end for you to have some fun. Each lesson is captured in an html file for online access. This is all in the service of humans learning. Enjoy!

:::
::::

::::
:::::

# Learning objectives 
For this first course, the learning objectives are to: 

* Install and load the `tidyverse` and `gapminder` packages in your RStudio console

* Make your first plot

## Install and load packages

```{r include=FALSE}
# install.packages(c("tidyverse", "gapminder"))

#load the libraries so you can use them
library(tidyverse)
library(gapminder)


```

## View the data


```{r data}
#| class-output: pre
#look at the gapminder dataset
head(gapminder)

#make gapminder an object
df <- gapminder

#read variable names
names(df)

```

## Make a plot

```{r plot}
#| class-output: pre

#make a plot
ggplot(data = df) +
  geom_point(aes(x = gdpPercap, y = lifeExp, color = continent)
             , alpha = .4) 

#make the plot an object
plot <- ggplot(data = df) +
  geom_point(aes(x = gdpPercap, y = lifeExp, color =  continent)
             , alpha = .4) 
```

```{r plot more}

#| class-output: pre

#use the object to add more things to the plot
plot +  
  
  #rescale data
  scale_x_log10() + 
  
  #add a smoothing line
  geom_smooth(aes(x = gdpPercap, y = lifeExp))
```

## Have fun!

Now it's your turn practice! Below is a fully functioning code editor. Use the code above to start, and then try changing the variables or changing the type of chart from a scatter plot (`geom_point()`) to a line graph (`geom_line()`) or a bar graph (`geom_col()` or `geom_bar()`).

```{webr-r}
library(ggplot2)
library(gapminder)

df <- gapminder

ggplot(df) +
  geom_point(aes(x = pop, y = lifeExp, color = continent)
             , alpha = .6)

```
